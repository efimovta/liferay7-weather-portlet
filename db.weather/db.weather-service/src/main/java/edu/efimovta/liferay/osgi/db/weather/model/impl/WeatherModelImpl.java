/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 * <p>
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 * <p>
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.efimovta.liferay.osgi.db.weather.model.impl;

import aQute.bnd.annotation.ProviderType;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import edu.efimovta.liferay.osgi.db.weather.model.Weather;
import edu.efimovta.liferay.osgi.db.weather.model.WeatherModel;
import edu.efimovta.liferay.osgi.db.weather.model.WeatherSoap;

import java.io.Serializable;
import java.sql.Types;
import java.util.*;

/**
 * The base model implementation for the Weather service. Represents a row in the &quot;Weather_Weather&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link WeatherModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WeatherImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see WeatherImpl
 * @see Weather
 * @see WeatherModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class WeatherModelImpl extends BaseModelImpl<Weather>
        implements WeatherModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a weather model instance should use the {@link Weather} interface instead.
     */
    public static final String TABLE_NAME = "Weather_Weather";
    public static final Object[][] TABLE_COLUMNS = {
            {"weatherId", Types.BIGINT},
            {"groupId", Types.BIGINT},
            {"companyId", Types.BIGINT},
            {"userId", Types.BIGINT},
            {"userName", Types.VARCHAR},
            {"createDate", Types.TIMESTAMP},
            {"modifiedDate", Types.TIMESTAMP},
            {"source", Types.VARCHAR},
            {"city", Types.VARCHAR},
            {"country", Types.VARCHAR},
            {"lat", Types.DOUBLE},
            {"lon", Types.DOUBLE},
            {"condition_", Types.VARCHAR},
            {"avgTemp", Types.DOUBLE},
            {"minTemp", Types.DOUBLE},
            {"maxTemp", Types.DOUBLE},
            {"date_", Types.TIMESTAMP}
    };
    public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();
    public static final String TABLE_SQL_CREATE = "create table Weather_Weather (weatherId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,source VARCHAR(75) null,city VARCHAR(75) null,country VARCHAR(75) null,lat DOUBLE,lon DOUBLE,condition_ VARCHAR(75) null,avgTemp DOUBLE,minTemp DOUBLE,maxTemp DOUBLE,date_ DATE null)";
    public static final String TABLE_SQL_DROP = "drop table Weather_Weather";
    public static final String ORDER_BY_JPQL = " ORDER BY weather.city ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Weather_Weather.city ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(edu.efimovta.liferay.osgi.db.weather.service.util.ServiceProps.get(
            "value.object.entity.cache.enabled.edu.efimovta.liferay.osgi.db.weather.model.Weather"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(edu.efimovta.liferay.osgi.db.weather.service.util.ServiceProps.get(
            "value.object.finder.cache.enabled.edu.efimovta.liferay.osgi.db.weather.model.Weather"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(edu.efimovta.liferay.osgi.db.weather.service.util.ServiceProps.get(
            "value.object.column.bitmask.enabled.edu.efimovta.liferay.osgi.db.weather.model.Weather"),
            true);
    public static final long CITY_COLUMN_BITMASK = 1L;
    public static final long DATE_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(edu.efimovta.liferay.osgi.db.weather.service.util.ServiceProps.get(
            "lock.expiration.time.edu.efimovta.liferay.osgi.db.weather.model.Weather"));
    private static final ClassLoader _classLoader = Weather.class.getClassLoader();
    private static final Class<?>[] _escapedModelInterfaces = new Class[]{
            Weather.class
    };

    static {
        TABLE_COLUMNS_MAP.put("weatherId", Types.BIGINT);
        TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
        TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
        TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
        TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
        TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
        TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
        TABLE_COLUMNS_MAP.put("source", Types.VARCHAR);
        TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
        TABLE_COLUMNS_MAP.put("country", Types.VARCHAR);
        TABLE_COLUMNS_MAP.put("lat", Types.DOUBLE);
        TABLE_COLUMNS_MAP.put("lon", Types.DOUBLE);
        TABLE_COLUMNS_MAP.put("condition_", Types.VARCHAR);
        TABLE_COLUMNS_MAP.put("avgTemp", Types.DOUBLE);
        TABLE_COLUMNS_MAP.put("minTemp", Types.DOUBLE);
        TABLE_COLUMNS_MAP.put("maxTemp", Types.DOUBLE);
        TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
    }

    private long _weatherId;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private boolean _setModifiedDate;
    private String _source;
    private String _city;
    private String _originalCity;
    private String _country;
    private double _lat;
    private double _lon;
    private String _condition;
    private double _avgTemp;
    private double _minTemp;
    private double _maxTemp;
    private Date _date;
    private Date _originalDate;
    private long _columnBitmask;
    private Weather _escapedModel;

    public WeatherModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Weather toModel(WeatherSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Weather model = new WeatherImpl();

        model.setWeatherId(soapModel.getWeatherId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setSource(soapModel.getSource());
        model.setCity(soapModel.getCity());
        model.setCountry(soapModel.getCountry());
        model.setLat(soapModel.getLat());
        model.setLon(soapModel.getLon());
        model.setCondition(soapModel.getCondition());
        model.setAvgTemp(soapModel.getAvgTemp());
        model.setMinTemp(soapModel.getMinTemp());
        model.setMaxTemp(soapModel.getMaxTemp());
        model.setDate(soapModel.getDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Weather> toModels(WeatherSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Weather> models = new ArrayList<Weather>(soapModels.length);

        for (WeatherSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _weatherId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setWeatherId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _weatherId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Weather.class;
    }

    @Override
    public String getModelClassName() {
        return Weather.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("weatherId", getWeatherId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("source", getSource());
        attributes.put("city", getCity());
        attributes.put("country", getCountry());
        attributes.put("lat", getLat());
        attributes.put("lon", getLon());
        attributes.put("condition", getCondition());
        attributes.put("avgTemp", getAvgTemp());
        attributes.put("minTemp", getMinTemp());
        attributes.put("maxTemp", getMaxTemp());
        attributes.put("date", getDate());

        attributes.put("entityCacheEnabled", isEntityCacheEnabled());
        attributes.put("finderCacheEnabled", isFinderCacheEnabled());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long weatherId = (Long) attributes.get("weatherId");

        if (weatherId != null) {
            setWeatherId(weatherId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String city = (String) attributes.get("city");

        if (city != null) {
            setCity(city);
        }

        String country = (String) attributes.get("country");

        if (country != null) {
            setCountry(country);
        }

        Double lat = (Double) attributes.get("lat");

        if (lat != null) {
            setLat(lat);
        }

        Double lon = (Double) attributes.get("lon");

        if (lon != null) {
            setLon(lon);
        }

        String condition = (String) attributes.get("condition");

        if (condition != null) {
            setCondition(condition);
        }

        Double avgTemp = (Double) attributes.get("avgTemp");

        if (avgTemp != null) {
            setAvgTemp(avgTemp);
        }

        Double minTemp = (Double) attributes.get("minTemp");

        if (minTemp != null) {
            setMinTemp(minTemp);
        }

        Double maxTemp = (Double) attributes.get("maxTemp");

        if (maxTemp != null) {
            setMaxTemp(maxTemp);
        }

        Date date = (Date) attributes.get("date");

        if (date != null) {
            setDate(date);
        }
    }

    @JSON
    @Override
    public long getWeatherId() {
        return _weatherId;
    }

    @Override
    public void setWeatherId(long weatherId) {
        _weatherId = weatherId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() {
        try {
            User user = UserLocalServiceUtil.getUserById(getUserId());

            return user.getUuid();
        } catch (PortalException pe) {
            return StringPool.BLANK;
        }
    }

    @Override
    public void setUserUuid(String userUuid) {
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _setModifiedDate = true;

        _modifiedDate = modifiedDate;
    }

    public boolean hasSetModifiedDate() {
        return _setModifiedDate;
    }

    @JSON
    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @JSON
    @Override
    public String getCity() {
        if (_city == null) {
            return StringPool.BLANK;
        } else {
            return _city;
        }
    }

    @Override
    public void setCity(String city) {
        _columnBitmask = -1L;

        if (_originalCity == null) {
            _originalCity = _city;
        }

        _city = city;
    }

    public String getOriginalCity() {
        return GetterUtil.getString(_originalCity);
    }

    @JSON
    @Override
    public String getCountry() {
        if (_country == null) {
            return StringPool.BLANK;
        } else {
            return _country;
        }
    }

    @Override
    public void setCountry(String country) {
        _country = country;
    }

    @JSON
    @Override
    public double getLat() {
        return _lat;
    }

    @Override
    public void setLat(double lat) {
        _lat = lat;
    }

    @JSON
    @Override
    public double getLon() {
        return _lon;
    }

    @Override
    public void setLon(double lon) {
        _lon = lon;
    }

    @JSON
    @Override
    public String getCondition() {
        if (_condition == null) {
            return StringPool.BLANK;
        } else {
            return _condition;
        }
    }

    @Override
    public void setCondition(String condition) {
        _condition = condition;
    }

    @JSON
    @Override
    public double getAvgTemp() {
        return _avgTemp;
    }

    @Override
    public void setAvgTemp(double avgTemp) {
        _avgTemp = avgTemp;
    }

    @JSON
    @Override
    public double getMinTemp() {
        return _minTemp;
    }

    @Override
    public void setMinTemp(double minTemp) {
        _minTemp = minTemp;
    }

    @JSON
    @Override
    public double getMaxTemp() {
        return _maxTemp;
    }

    @Override
    public void setMaxTemp(double maxTemp) {
        _maxTemp = maxTemp;
    }

    @JSON
    @Override
    public Date getDate() {
        return _date;
    }

    @Override
    public void setDate(Date date) {
        _columnBitmask |= DATE_COLUMN_BITMASK;

        if (_originalDate == null) {
            _originalDate = _date;
        }

        _date = date;
    }

    public Date getOriginalDate() {
        return _originalDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
                Weather.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Weather toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Weather) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        WeatherImpl weatherImpl = new WeatherImpl();

        weatherImpl.setWeatherId(getWeatherId());
        weatherImpl.setGroupId(getGroupId());
        weatherImpl.setCompanyId(getCompanyId());
        weatherImpl.setUserId(getUserId());
        weatherImpl.setUserName(getUserName());
        weatherImpl.setCreateDate(getCreateDate());
        weatherImpl.setModifiedDate(getModifiedDate());
        weatherImpl.setSource(getSource());
        weatherImpl.setCity(getCity());
        weatherImpl.setCountry(getCountry());
        weatherImpl.setLat(getLat());
        weatherImpl.setLon(getLon());
        weatherImpl.setCondition(getCondition());
        weatherImpl.setAvgTemp(getAvgTemp());
        weatherImpl.setMinTemp(getMinTemp());
        weatherImpl.setMaxTemp(getMaxTemp());
        weatherImpl.setDate(getDate());

        weatherImpl.resetOriginalValues();

        return weatherImpl;
    }

    @Override
    public int compareTo(Weather weather) {
        int value = 0;

        value = getCity().compareTo(weather.getCity());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Weather)) {
            return false;
        }

        Weather weather = (Weather) obj;

        long primaryKey = weather.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public boolean isEntityCacheEnabled() {
        return ENTITY_CACHE_ENABLED;
    }

    @Override
    public boolean isFinderCacheEnabled() {
        return FINDER_CACHE_ENABLED;
    }

    @Override
    public void resetOriginalValues() {
        WeatherModelImpl weatherModelImpl = this;

        weatherModelImpl._setModifiedDate = false;

        weatherModelImpl._originalCity = weatherModelImpl._city;

        weatherModelImpl._originalDate = weatherModelImpl._date;

        weatherModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Weather> toCacheModel() {
        WeatherCacheModel weatherCacheModel = new WeatherCacheModel();

        weatherCacheModel.weatherId = getWeatherId();

        weatherCacheModel.groupId = getGroupId();

        weatherCacheModel.companyId = getCompanyId();

        weatherCacheModel.userId = getUserId();

        weatherCacheModel.userName = getUserName();

        String userName = weatherCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            weatherCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            weatherCacheModel.createDate = createDate.getTime();
        } else {
            weatherCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            weatherCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            weatherCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        weatherCacheModel.source = getSource();

        String source = weatherCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            weatherCacheModel.source = null;
        }

        weatherCacheModel.city = getCity();

        String city = weatherCacheModel.city;

        if ((city != null) && (city.length() == 0)) {
            weatherCacheModel.city = null;
        }

        weatherCacheModel.country = getCountry();

        String country = weatherCacheModel.country;

        if ((country != null) && (country.length() == 0)) {
            weatherCacheModel.country = null;
        }

        weatherCacheModel.lat = getLat();

        weatherCacheModel.lon = getLon();

        weatherCacheModel.condition = getCondition();

        String condition = weatherCacheModel.condition;

        if ((condition != null) && (condition.length() == 0)) {
            weatherCacheModel.condition = null;
        }

        weatherCacheModel.avgTemp = getAvgTemp();

        weatherCacheModel.minTemp = getMinTemp();

        weatherCacheModel.maxTemp = getMaxTemp();

        Date date = getDate();

        if (date != null) {
            weatherCacheModel.date = date.getTime();
        } else {
            weatherCacheModel.date = Long.MIN_VALUE;
        }

        return weatherCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(35);

        sb.append("{weatherId=");
        sb.append(getWeatherId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", city=");
        sb.append(getCity());
        sb.append(", country=");
        sb.append(getCountry());
        sb.append(", lat=");
        sb.append(getLat());
        sb.append(", lon=");
        sb.append(getLon());
        sb.append(", condition=");
        sb.append(getCondition());
        sb.append(", avgTemp=");
        sb.append(getAvgTemp());
        sb.append(", minTemp=");
        sb.append(getMinTemp());
        sb.append(", maxTemp=");
        sb.append(getMaxTemp());
        sb.append(", date=");
        sb.append(getDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(55);

        sb.append("<model><model-name>");
        sb.append("edu.efimovta.liferay.osgi.db.weather.model.Weather");
        sb.append("</model-name>");

        sb.append(
                "<column><column-name>weatherId</column-name><column-value><![CDATA[");
        sb.append(getWeatherId());
        sb.append("]]></column-value></column>");
        sb.append(
                "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
                "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
                "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
                "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
                "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
                "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
                "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
                "<column><column-name>city</column-name><column-value><![CDATA[");
        sb.append(getCity());
        sb.append("]]></column-value></column>");
        sb.append(
                "<column><column-name>country</column-name><column-value><![CDATA[");
        sb.append(getCountry());
        sb.append("]]></column-value></column>");
        sb.append(
                "<column><column-name>lat</column-name><column-value><![CDATA[");
        sb.append(getLat());
        sb.append("]]></column-value></column>");
        sb.append(
                "<column><column-name>lon</column-name><column-value><![CDATA[");
        sb.append(getLon());
        sb.append("]]></column-value></column>");
        sb.append(
                "<column><column-name>condition</column-name><column-value><![CDATA[");
        sb.append(getCondition());
        sb.append("]]></column-value></column>");
        sb.append(
                "<column><column-name>avgTemp</column-name><column-value><![CDATA[");
        sb.append(getAvgTemp());
        sb.append("]]></column-value></column>");
        sb.append(
                "<column><column-name>minTemp</column-name><column-value><![CDATA[");
        sb.append(getMinTemp());
        sb.append("]]></column-value></column>");
        sb.append(
                "<column><column-name>maxTemp</column-name><column-value><![CDATA[");
        sb.append(getMaxTemp());
        sb.append("]]></column-value></column>");
        sb.append(
                "<column><column-name>date</column-name><column-value><![CDATA[");
        sb.append(getDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}